---
# Source: cluster-resources/templates/cluster-agent/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vessl
---
# Source: cluster-resources/templates/feature-discovery/node-feature-discovery-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vessl-node-feature-discovery
---
# Source: cluster-resources/templates/local-path-provisioner/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vessl-local-path-provisioner-service-account
---
# Source: cluster-resources/templates/metrics-exporter/kube-state-metrics-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vessl-kube-state-metrics
---
# Source: cluster-resources/charts/harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vessl-harbor-core
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "WWxoVDVDR2RDWFdQWnJFUA=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  HARBOR_ADMIN_PASSWORD: "ZnVjaw=="
  POSTGRESQL_PASSWORD: "ZnVjazI="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "ZVFqOWI3dmcxY1k3VjJHdkNQSU4zRThubkxtYk5OcFo="
---
# Source: cluster-resources/charts/harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "vessl-harbor-jobservice"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "YWNrY1BaVFQ2MnZLYnR0Tw=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: cluster-resources/charts/harbor/templates/nginx/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vessl-harbor-nginx
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMekNDQWhlZ0F3SUJBZ0lSQUt1VFNSRXBiVnlOYzY4NzZDL296eWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEl5TURVd01qRXhNRFV6TjFvWERUSXpNRFV3TWpFeApNRFV6TjFvd0Z6RVZNQk1HQTFVRUF4TU1kbVZ6YzJ3dGFHRnlZbTl5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBek1MazBEMjArZk1VVk1JR0o5MDFXOE5GcjlGNWo4TTNKWnM1TW8vWkY4YjcKbFlhSnVib0FXVTFLTTNjT1dROUR1ZFBQeDhzcVlFdlBsSnRLdzlrTUlxVnJzMDF3b3U1RFAwYWVHaXhmWGk1ZQpwdlpKUlNqR2JxSWQrYjdvdHdwTTFQZTVmZlhXeGlqNVpTaWlGeHgxa09QTkg4N05SbC96M2MyemJxSnNCM3RuCjZGTnZSb2xmbzZvVzZObUcxYWlsZGdIVjZXMEVXTFN0K3JRVDBPRUdaRVdlSTVoblRRYTRXdlZtM2ZGbTJiTDkKdkE3c29YeHEvT09LazZhY1E0M211U0N1enBMMGJkNytCc215QlZybnRUcFJvQW1QcjdOUkVpQ200SXJHQ1A5Ygp4Rml3ZUYvNzZDSGl4aWo5d1ZseUlwU1hmS004WWQ3Y2lHUHpiRXlmUVFJREFRQUJvM2t3ZHpBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVbXFMbFdyV2E2c0EzOTVyR0tvNFhXRDl6cFVvd0Z3WURWUjBSQkJBdwpEb0lNZG1WemMyd3RhR0Z5WW05eU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2xIcHc3UUh5eHRLc3R6Vmk3CldqTWkyS3E1dE1uRy9DZ1B6a0xTdmpVNlQ2empvd0t4NDM1aEV1bFdEak4zbnlRRVhmSlNGeHFEcy9HWHY0M0gKUWdXNHpKdEo3VmRreFFQUnFWMFVQbEtOdVo3NUt4Q2NIT0pObnBEY3NrYjFiWHlXQkZaUE13Q1FERFM0U3RSQwp5UkN3YmR3bG1hS3RmRzRBd0E5blVYd25RWkNyckVINkI4aDFsTjZwNlF0YlY2dUlhcHFub0p3SkxUY01SUWc2CnhTZWVWckJxbk1tUUVKd3FibjBFRG0rQ2tSQ1pOaU45K0FaaW1sQWJ5Nkx1MEZOSmE3eG13Ukh2WHhBRVc2THoKNGwrdHM0U3lCK3d5NE91alc0N2VWMU1DWG9Td3dOakVCaEdic2dRUEZvVmF3VU9ybVF6WFFTbE5iczhVY3pFeQpBdVN1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBek1MazBEMjArZk1VVk1JR0o5MDFXOE5GcjlGNWo4TTNKWnM1TW8vWkY4YjdsWWFKCnVib0FXVTFLTTNjT1dROUR1ZFBQeDhzcVlFdlBsSnRLdzlrTUlxVnJzMDF3b3U1RFAwYWVHaXhmWGk1ZXB2WkoKUlNqR2JxSWQrYjdvdHdwTTFQZTVmZlhXeGlqNVpTaWlGeHgxa09QTkg4N05SbC96M2MyemJxSnNCM3RuNkZOdgpSb2xmbzZvVzZObUcxYWlsZGdIVjZXMEVXTFN0K3JRVDBPRUdaRVdlSTVoblRRYTRXdlZtM2ZGbTJiTDl2QTdzCm9YeHEvT09LazZhY1E0M211U0N1enBMMGJkNytCc215QlZybnRUcFJvQW1QcjdOUkVpQ200SXJHQ1A5YnhGaXcKZUYvNzZDSGl4aWo5d1ZseUlwU1hmS004WWQ3Y2lHUHpiRXlmUVFJREFRQUJBb0lCQVFDYVlZY3JDcHRjcU0xMwphaUpDQkNLcTRQdTFwL1pEVWloT0RrNTl0TDgxa2kwMWU0NXpuYTJOcHh4KzJSRFVUUkgvRlpmZlIyclgxOURXCmRvOVVRbDFIOGZqVjQxazlQdThzMGcxNkptSnhHL3o1WFUrNCtSbERhSys1RVJ0Y2hrT1Bmb2M0VlJadHFZNy8KbWpjN3ZaVldmS3EzaExCNGt2ZkhEOFJ0Y2NDSmtrUWo2SWsvTnBJUWRScXdRb1Bqd25yQ2Q5K1dIeFNVRjlhZgozd3dOWG5YRXBCdUpGTmdkekZWSlp2cGx6ZXkxd3JKWmhGQTJGa2xhSytGRlJwaVZEZGo0dXQ3akREL0hRanlBCjEzcTV4dVNMV0l4cHhhdEgrNEFiT3V1N21kUEpUUitSRHNHNFdXM2VLdm1zS0VoM0ZqU2tKRGsvblRSQ0NoL0EKNGMzMy8rd0JBb0dCQU83WUNsdE12NnZnMmRJYzdURVhnblhoQzBhdnpwb2dMdll5V0dJNXZCTUJ2T2JBR1dCLwpOUnNTSDVvVkNHcUptNzEwcEpseEhlWGpGcU9oVjhTbEMxaDJkNVU4bTlpdTYvNTZmczFsMFlybnRwL3RxYm91CmQ5aVdxT1ZPVkRWSkhhNHpuMXZhMWZIbnhvOHhQYXlLN1NuSVlaWUZnY3g2ZlBUQTN6N2NXbnBSQW9HQkFOdDQKSU9PR1pqTjNMU0xZRk82UmYzMzBQTExXdTI5U3R3YTRoRUFhN3lLK1JLaWwzMDEvNVRQNmRPcnB2QnNSaDIyUApKYU03Y1liRzYzNUQyMEdxQ2w1UUp3bzBOemFBdEpteUhRaWliZlFvUExkM2QzNjU0R096OXpaYlhzQjdFdm1tCnlGeU9wSzJqVFl2SjlqYjFlMVJXMW1lczcvaGs1TVF1WWYvQ1lLbnhBb0dCQUtuTC9yamZmQmYyRndSdnVoUS8KY1dqYUgwa1diUnRYSyt1czZQYVRzdWdVUVRZT2RUd0wwelkya1M3YUt3eUtYYVMzaXRqbStPbFlvdHliTkNsQgphQ3B3dGh6clpLUUwzd3dnQzR0OENoYmxHZ2ppVGRwbGRLQU9vMjI1WE5Zdzc1L0xaVXhJNi9ZNDN3a25hWUFECm1BMHZQbWtINnpueURtbDF3SUFRNldXeEFvR0FmOGVRZG9oUXh0UXpmbDhLeU9BRHQ4VFU5bGNacURZamhCRTQKUnM2bnZyWEM2ZUl4Z2tEZHBRYkV2ZVU2ZFJRZW9vWStwcXc4YS9rek1UKzJ6Nk4rQisxbzNZTUxSbnRuS3psTgp1REpDREc3RTh4am1oTzBhSFZLeHMzODlTcG9kc1NjTzd2ektHcUxDeW9uYkJhS2xuTFEyZndSc2IxWG03K1lGCmZ0Q2dVVEVDZ1lCQmVZZXV0OHlEenJXK0VnaUNodGxiTlhIYVRldCt3KzFtdU8yLzQ3MHZ6NjdVSlFiWkVHcjIKVEJqM3Q3NHFhSUdQVVE0NUpIVTBKa2dBUlRmQVRTRUJqUWN4T1FGTlZlNC9mS21MamFoejNSckt1RGM4Zm9tVAo5ckg4L3pUUHpwdUZWaUppS0ppcmJLZFFZVThQTDZvTE8wR2JJNHdWbXZYOWtvd3ZXWkYyL3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRU0pTdDRnbDZLRkl1SjN6Q1hMNzljekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05Nakl3TlRBeU1URXdOVE0zV2hjTk1qTXdOVEF5TVRFdwpOVE0zV2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREFVQS9xNlBCK3B2anRQdXZzU3Y0NU5HMXpab2VFMUZNYmFDRFNkYkZLc0VnS2lwRHcKY0lsRCtPMDNLWUFOTU1qaUxQamNTSEtZcVBLYy9xY0N5a2dWUWRXNkNpbkE1eUp3LzhRczdqQThyQjFodFlyQQpwTXBIck5nekFxcFY1ZCtIVlNCVHQ3bXdKTjN1RDduTC9IbUR3TVhkcnBBaTBhcDBnbHcrWDEwMnUreVBTSzl3ClZLdHBPeU8zVzdncXVBMzRWSHJWL2RNNWVKbzFtYWszZ0F3NUt4WDQyOGVONXQxQU0zWGVOSW0vNjU5TDJSd3EKZUV5UUFpSHZmd1BhUVd5RGQ2NUZyejdMNzYzRDhlQzZUNlhGYmgzby83Ym1zcnhxVW9WZGp3OWRzOUVqYmtHSApuV2xiczR1ZmZMaTBlS2I3NUM2bzZqblRhZ0NIQTJ1UldmOXpBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVtcUxsV3JXYTZzQTM5NXJHS280WFdEOXpwVW93RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBL3JncTZpckx2Uy9OeFBRWXBHb0R4akw0MTlmazhKcmt4SjNzUE4rMjcydW5wN3BXUFJMWTBYCitjTFlSNWZOaWMyM21LQ2N3YU93emY0WW5SOStHdFZSUThZOVVnc3FsSFVKZ1piWnFFNzU0anROVzY0SlQwYWIKV0puczIrRUFRcmhjUThsd01ReXFWYU5RZVJ4MkhhaG1SajRWcU1XRVVVb0N6cHYyQUJWOW52VDJFQ0F5UnJpRwpmZ2kxU0ZUNG5NUWdnNEQwRlo5cmVQWnBqQmw4OVpVcU43Sm4xRXJYRlVick5nQWQvK1JuSWx0bWczenRGeSttCkJla3JmNW8xNURGYmZSQWxDUGVJOHhHZ3pBSnJqeUZURTY0ME9vcHNKN21tUDE1YTBIbyt6dzNMTW5PNm4reGIKNVJCTVo5MkFaTmdqdzdLVEsyUUdPd0liSlpyUE5rMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: cluster-resources/charts/harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vessl-harbor-notary-server
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRQXBZTHpjcmpwZ3M1a1lNbUFEVk5MakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXlNRFV3TWpFeE1EVXpObG9YRFRJegpNRFV3TWpFeE1EVXpObG93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU04UnRKaGJYam8yL3NhSWFXNzhFbk9RWGFDcXNsZnQKMG1EblpINFhoVDdCTnl4bDBBNWFyQ2xWaHhHcisxZVRwTDlGTVp4ckRRY0ticys4Qm5lQ2V2S1RqNWY5enJSbgp3NmRISFZTbVVZZllWN1hPNGxpMFpUc1h1S1lQYURTR096QVJlbDJncjc2aElHVzl6MmNJUlA4YjRSMmVlWkNzCjkreGlsSTYySlQzN2dJSjFCMFozZkFyaExlZktzd0xtZ1Y0WGpWNFJwSHBYMW5ZS3FrdTZTSUloVGh4Wnp4RUQKMGVVK295MnA2NzF5bExxVE42TTVoa0s5a0luR0NpV1l6TEdRWjY4NlAvTFVyUW9PR09QVjgzL3llUlZxaXpORApEV3U3dWNOOUVLaFAyVjJBdC9QelQ1T2h0YTk4ampJZEMya1FLWldTZ0l6OVBLWUtTQmdMNWJzQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSSUlNVWcyMzRicVduMXlKYVV5amN0R3RsegpaakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBSkJGVUpWL3EyZTJHVVMzSzZCYWZFYWNOamhTT2VwMXBLZDhtCmgrdVpZalRjSTFMQWtDclFqL1ZIUXdtdHJTeEF4VGd0MnJqRzI1OVhFd3F2SVFqNGtLMlRzOFh6eDlRWW1vWWEKVlNsTVArQ2NMTW1TZGZvSEcxeC9pMFZmMUxmOVJudVdGZThQMFZPUHFDVGVOSW1SZVNjczdvcjJsSk8ydHdycQp4T2FtYnJaRGxkRFJSYVNESEFnS2pFcHkyeVBpMytDWDQyTURhRG1EUGo4SHdSd3FjWFQ2RUEwNGdnUEc0YTlGCjBxNmU4SGpvZ2xVWitEd08yZ2lsSW9VVGI5TEdicTFTdUpBOVpXNlNrNGlaUTJsNjMwTnhyVzhQdnlpNVFiZHcKNmUrbXFKUkhybmJCMWVnQlRyRUVKUEhFcFlxa0NkSjZEdjI2N1dFdWQySC9PS29KTXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lRWmRlUGdBUklMRHoxWFBKbE5JbkZrREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXlNRFV3TWpFeE1EVXpObG9YRFRJegpNRFV3TWpFeE1EVXpObG93SlRFak1DRUdBMVVFQXhNYWRtVnpjMnd0YUdGeVltOXlMVzV2ZEdGeWVTMXphV2R1ClpYSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFER1RsbzNUdXZEdUZvUXhKMUIKSC9XUkQ2MGVZbi9vZ2h3RmFOTzNzajQ0SzA0bW9HUm13QUIyN09Mano4aFBHeEpBaWJuRXhscEp6YmVLYXpiLwozWis0MnFaWmlnYytGZUlKOG53TjZ3N1Nhc3hDSVdodndXa3g2QVdIRkF1VkpwSjU3bGxSQWpHVTdKdi9sSjBxCkxkSVpSMHNIa2M5VHhONXBDVTFMQkYyV1RRM1MxMi8vSWIzWll3c0hjVlNCZHlteW1vY0tMNXNjWG1jaVNYeVUKQ2Z4RUFFSDZQTnp2QUxaLzVnWEsyWjNWTTVXckRwNHpkajk5cnFycjkwOGhnd0RnN3ZlRE5UanlqUmRzdGZVUgptaDJQeTNlZGRlZ3Y2MDN2L3FEQk50cTI4eGJwckpCSEkwT3phYnVuQUxmK09RVkhvOHh1SlZnQUFwcldxMmZ5CnlaSlRBZ01CQUFHamdZZ3dnWVV3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZFZ2d4U0RiZmh1cAphZlhJbHBUS055MGEyWE5tTUNVR0ExVWRFUVFlTUJ5Q0duWmxjM05zTFdoaGNtSnZjaTF1YjNSaGNua3RjMmxuCmJtVnlNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJwMGdJN2RwVW1pQlRrbHg0RWpWM241YUdwKzVCR3pZT0IKSTZWK21hNGlkU3F1YncxOGJOZkN4OGhGTlNaYUh0eUYzd1hjSFVuMkE4RmVZRHFJWUtOYWUwc3dGNmh4cmpwdApCNmoxN2VxTjlxd21oT3YwcjZCSU43cHE0WjdYY3J3RWNaSis1ZE9SK0Y5Um44bWFYM3REazdzU2NoQ0tWbmkrCjlOWkMwbkVuVFNROFM1VFZKU3ptbWxtdlJPempvYktnSTdrZDJXeWpGdE5wYUZHaGYrbWwrK0FFWWp6RWxoblQKSUlnbS8wWUQxNmFFWEVTSUkySjcrTkNnRmNwWlY4OFh2RTBFeUhSNm1USDUvZ2JsSng2Y0lRbW4wWXByNDFDUwovUmFwUXpNY2szRmJlQWg4cWhVajBnNWgxQXI3cUwzNjFGaXBUZDZPREdMbEI4OGVkT2FLCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeGs1YU4wN3J3N2hhRU1TZFFSLzFrUSt0SG1KLzZJSWNCV2pUdDdJK09DdE9KcUJrClpzQUFkdXppNDgvSVR4c1NRSW01eE1aYVNjMjNpbXMyLzkyZnVOcW1XWW9IUGhYaUNmSjhEZXNPMG1yTVFpRm8KYjhGcE1lZ0ZoeFFMbFNhU2VlNVpVUUl4bE95Yi81U2RLaTNTR1VkTEI1SFBVOFRlYVFsTlN3UmRsazBOMHRkdgoveUc5MldNTEIzRlVnWGNwc3BxSENpK2JIRjVuSWtsOGxBbjhSQUJCK2p6Yzd3QzJmK1lGeXRtZDFUT1ZxdzZlCk0zWS9mYTZxNi9kUElZTUE0TzczZ3pVNDhvMFhiTFgxRVpvZGo4dDNuWFhvTCt0TjcvNmd3VGJhdHZNVzZheVEKUnlORHMybTdwd0MzL2prRlI2UE1iaVZZQUFLYTFxdG44c21TVXdJREFRQUJBb0lCQVFDYzVCeUlLWTVwK0k1NQpPYlRZYzNxTFhBV3hSbWpBQVVBK0gyTnhzRGw5b3ZWZnBnSUpNTnF0UEZsOXQwUlpJYWZkRzVtM3p0NWNDYit1CmFZaklBZ1Y5OEs4dm8vNTY1a0ZCY1hFb2FkSCtNN1NLbFhmVkF3WkJEN3BmMWtJYnJMcXljUnFFOXVGWFc2TkkKSDhJQVB1UThUNlZTeGM5c0RST1JzbVJPZDVPN2RyR0phRlZZZy9WY2h3dFFkMXFhOFJNYjEyOENZY2RzM2loegpiT2oxQm9PenpON201NkZSRW54RVoyTlUvTUFtMGh3QnY2WXEydmREZVRuQVhxQU0xWDNHM3hUcFZBRjFEM1JPCks4VCs1eVJPMU5ZZ09XMEk0T2l5LytzZFM1RkJyNkNjTmI4VHRXSTZyYS9GQ0ZBWHhtU1ZibHRpVXhYN0psNTAKbWtEVDRRQmhBb0dCQU5HdTltUlZkWEJUOGpBT2RCVkptbEtHaGw1MS9BSjR3eVRtRGpNVlhLNFB6TUY0Q0lQUApXRzJDL291d2VkRVhJOEc2YjBoT3NhbzFyWU4wcCtIRTU2ZlRZbTBBdFEwQUFIY2hpM3RZZUJvSmtlaUJkYVNQCmNFeDlWRk5qUEpkelhHTzhZQjYwMk9vYlFPeEJRS0NoN3ZXVlczQ1RoU3BTSS9Mck1PNGJXcFhaQW9HQkFQSWMKQjRYM1F2TnV1aWZVVDhFTzhaakZFdDdnSWpVODMyL0U4SElBUEI1b3V6N0RyanJPR0FVWWFxbXY0cjNpR2x3cgowQXdxeGdPdGRFRzhEajRkUU4rWDFFV0E5eS9TcTJPRzViRmZrYmcxNktRNTJySGdMcHVQMVBYSWJzVllxQ01XClIzRFMyOEVjSW1ZNEdYaU9YdjVvSTZRUVdlM0NiVkVZNDIwcGJ2SUxBb0dBR0NGZ2JZK0FJbHNteGUwRDR1ZEQKZ1RmR0F0emxFWXZBT1dEWVJYeXgyNzRwdkNJS0tORVZ4aFNMSXB3K2lKZDNIL1pLbERHcU5JSlU0NG5yUUFvZQo5cXRXNm1Cb2RZU0lpUzB0RmhiS1M0VEthODFxTW5QbllvWVJ6RDdoWERTRWIxM2dXZWhLQmpiNHM3ZVdybVcwClVFTE44UmlvL0lQVGEwTXhzRlVwaVpFQ2dZQjc0dW5hbkNhdktBYXJvTkZhcVlub3NWY3hvcUQrZXZLZVg3amwKck1jV2pHTGNBQWRrWWRjYXJGN1FDNGRMd0tuYVpqVGtOUEwwS01xblpGSXBhSkNzbVNWdWwwcGxOemlxQ2ZuNAo1RDFOZEpCaGtKVWVsZWRqaEpybFZiV1EyQWZaUkdvMENrR1d0QTNLSG9TeUVxLzdJRkMwZ0FWMFN4dmk5b2hSCmNIVXI5d0tCZ1FDdWw4WjhqWCsrUkZqcmxvakFSWGQwaHM3dnE5bVJZQ1lNWDV6OFAzRE9QN2VZSXMxdE1ZVksKL1VDK2VNR2RlNm5FVW94SCtjdUxoL212MzA2Zk85VjNrZi9nUmxBUGtxaHdBc3B0K0FSZUE1OEtvVGFGMUtlSgpoN2RQNy9XNEQ5ZmVocitiVk5MbURJMjk2TEk3TThlZHdGdW8wUmhWdUdDcjJ3aS9lRGhWNFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogInZlc3NsLWhhcmJvci1ub3Rhcnktc2lnbmVyIiwKICAgICJwb3J0IjogIjc4OTkiLAogICAgInRsc19jYV9maWxlIjogIi9ldGMvc3NsL25vdGFyeS9jYS5jcnQiLAogICAgImtleV9hbGdvcml0aG0iOiAiZWNkc2EiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6ZnVjazJAdmVzc2wtaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2VydmVyP3NzbG1vZGU9ZGlzYWJsZSIKICB9LAogICJhdXRoIjogewogICAgInR5cGUiOiAidG9rZW4iLAogICAgIm9wdGlvbnMiOiB7CiAgICAgICJyZWFsbSI6ICIvc2VydmljZS90b2tlbiIsCiAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAiaXNzdWVyIjogImhhcmJvci10b2tlbi1pc3N1ZXIiLAogICAgICAicm9vdGNlcnRidW5kbGUiOiAiL3Jvb3QuY3J0IgogICAgfQogIH0KfQ==
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6ZnVjazJAdmVzc2wtaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2lnbmVyP3NzbG1vZGU9ZGlzYWJsZSIsCiAgICAiZGVmYXVsdF9hbGlhcyI6ICJkZWZhdWx0YWxpYXMiCiAgfQp9
---
# Source: cluster-resources/charts/harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "vessl-harbor-registry"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "WDFpanVITUNIQWlic2lJMA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: cluster-resources/charts/harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "vessl-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJFJqejJQWUhIbi5TT1ZIZWRhYjZHTWVwNi8ydjFadjJGWThFcVFzNmJsc3FORnNzYlZFUXRX"
---
# Source: cluster-resources/charts/harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "vessl-harbor-registryctl"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: cluster-resources/templates/cluster-agent/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vessl-agent
data:
  access-token: Sk5SK2ZFZU1IYTFlNHh4ZTZGM2cybno5clpVSUJ6Y1ViY2dVaGlLLzVwM0d5L0svb0pRWGhvdnBZdEZzaFNETWJqektCZjNnNThEaXpGYlFleEx0MUxBR2NyYkdzakU1TkJnNEppdlRDYVp0Zk9BRGZRUHdLQT09
type: Opaque
---
# Source: cluster-resources/charts/harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vessl-harbor-core
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "vessl-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: ""
  CORE_URL: "http://vessl-harbor-core:80"
  JOBSERVICE_URL: "http://vessl-harbor-jobservice"
  REGISTRY_URL: "http://vessl-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://vessl-harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://vessl-harbor-notary-server:4443"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "false"
  TRIVY_ADAPTER_URL: "http://vessl-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "false"
  CHART_REPOSITORY_URL: "http://vessl-harbor-chartmuseum"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://vessl-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://vessl-harbor-redis:6379/2?idle_timeout_seconds=30"
  PORTAL_URL: "http://vessl-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://vessl-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "vessl-harbor-core,vessl-harbor-jobservice,vessl-harbor-database,vessl-harbor-chartmuseum,vessl-harbor-notary-server,vessl-harbor-notary-signer,vessl-harbor-registry,vessl-harbor-portal,vessl-harbor-trivy,vessl-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry"
---
# Source: cluster-resources/charts/harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vessl-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://vessl-harbor-core:80"
  TOKEN_SERVICE_URL: "http://vessl-harbor-core:80/service/token"
  REGISTRY_URL: "http://vessl-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://vessl-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "vessl-harbor-core,vessl-harbor-jobservice,vessl-harbor-database,vessl-harbor-chartmuseum,vessl-harbor-notary-server,vessl-harbor-notary-signer,vessl-harbor-registry,vessl-harbor-portal,vessl-harbor-trivy,vessl-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: cluster-resources/charts/harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vessl-harbor-jobservice"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://vessl-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
---
# Source: cluster-resources/charts/harbor/templates/nginx/configmap-https.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vessl-harbor-nginx
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;

    events {
      worker_connections 3096;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path /tmp/client_body_temp;
      proxy_temp_path /tmp/proxy_temp;
      fastcgi_temp_path /tmp/fastcgi_temp;
      uwsgi_temp_path /tmp/uwsgi_temp;
      scgi_temp_path /tmp/scgi_temp;
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server "vessl-harbor-core:80";
      }

      upstream portal {
        server "vessl-harbor-portal:80";
      }
      upstream notary-server {
        server vessl-harbor-notary-server:4443;
      }

      log_format timed_combined '[$time_local]:$remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;

      map $http_x_forwarded_proto $x_forwarded_proto {
        default $http_x_forwarded_proto;
        ""      $scheme;
      }
      server {
        listen 4443 ssl;
        listen [::]:4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.1 tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;

        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;

        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      }

      server {
        listen 8443 ssl;
        listen [::]:8443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        # Add extra headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; HttpOnly; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

      location /service/notifications {
          return 404;
        }
      }
        server {
          listen 8080;
          listen [::]:8080;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      }
    }
---
# Source: cluster-resources/charts/harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vessl-harbor-portal"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: cluster-resources/charts/harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vessl-harbor-registry"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: vessl-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: cluster-resources/charts/harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "vessl-harbor-registryctl"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
data:
---
# Source: cluster-resources/templates/local-path-provisioner/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: local-path-config
data:
  config.json: |-
    {
            "nodePathMap":[
            {
                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths":["/opt/local-path-provisioner"]
            }
            ]
    }
  setup: |-
    #!/bin/sh
    while getopts "m:s:p:" opt
    do
        case $opt in
            p)
            absolutePath=$OPTARG
            ;;
            s)
            sizeInBytes=$OPTARG
            ;;
            m)
            volMode=$OPTARG
            ;;
        esac
    done

    mkdir -m 0777 -p ${absolutePath}
  teardown: |-
    #!/bin/sh
    while getopts "m:s:p:" opt
    do
        case $opt in
            p)
            absolutePath=$OPTARG
            ;;
            s)
            sizeInBytes=$OPTARG
            ;;
            m)
            volMode=$OPTARG
            ;;
        esac
    done

    rm -rf ${absolutePath}
  helperPod.yaml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: helper-pod
    spec:
      containers:
      - name: helper-pod
        image: quay.io/vessl-ai/busybox:21.10
---
# Source: cluster-resources/templates/local-path-provisioner/storage-class.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: vessl-local-path-vessl
provisioner: rancher.io/local-path
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Delete
---
# Source: cluster-resources/charts/harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: vessl-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: vessl-local-path-vessl
---
# Source: cluster-resources/charts/harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: vessl-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: vessl-local-path-vessl
---
# Source: cluster-resources/templates/cluster-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vessl-vessl
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: cluster-resources/templates/feature-discovery/node-feature-discovery-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vessl-node-feature-discovery-vessl
rules:
- apiGroups:
  - ""
  resources:
  - nodes
# when using command line flag --resource-labels to create extended resources
# you will need to uncomment "- nodes/status"
# - nodes/status
  verbs:
  - get
  - patch
  - update
  # List only needed for --prune
  - list
---
# Source: cluster-resources/templates/local-path-provisioner/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vessl-local-path-provisioner-vessl
rules:
  - apiGroups: [ "" ]
    resources: [ "nodes", "persistentvolumeclaims", "configmaps" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "endpoints", "persistentvolumes", "pods" ]
    verbs: [ "*" ]
  - apiGroups: [ "" ]
    resources: [ "events" ]
    verbs: [ "create", "patch" ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "storageclasses" ]
    verbs: [ "get", "list", "watch" ]
---
# Source: cluster-resources/templates/metrics-exporter/kube-state-metrics-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vessl-kube-state-metrics-vessl
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - secrets
    - nodes
    - pods
    - services
    - resourcequotas
    - replicationcontrollers
    - limitranges
    - persistentvolumeclaims
    - persistentvolumes
    - namespaces
    - endpoints
    verbs:
    - list
    - watch
  - apiGroups:
    - extensions
    resources:
    - daemonsets
    - deployments
    - replicasets
    - ingresses
    verbs:
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    - daemonsets
    - deployments
    - replicasets
    verbs:
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    - jobs
    verbs:
    - list
    - watch
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - list
    - watch
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    - volumeattachments
    verbs:
    - list
    - watch
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - mutatingwebhookconfigurations
    - validatingwebhookconfigurations
    verbs:
    - list
    - watch
  - apiGroups:
    - networking.k8s.io
    resources:
    - networkpolicies
    verbs:
    - list
    - watch
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - list
    - watch
---
# Source: cluster-resources/templates/cluster-agent/clusterrole-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vessl-vessl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vessl-vessl
subjects:
  - kind: ServiceAccount
    name: vessl
    namespace: vessl
---
# Source: cluster-resources/templates/feature-discovery/node-feature-discovery-clusterrole-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vessl-node-feature-discovery-vessl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vessl-node-feature-discovery-vessl
subjects:
- kind: ServiceAccount
  name: vessl-node-feature-discovery
  namespace: vessl
---
# Source: cluster-resources/templates/local-path-provisioner/clusterrole-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vessl-local-path-provisioner-vessl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vessl-local-path-provisioner-vessl
subjects:
  - kind: ServiceAccount
    name: vessl-local-path-provisioner-service-account
    namespace: vessl
---
# Source: cluster-resources/templates/metrics-exporter/kube-state-metrics-clusterrole-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vessl-kube-state-metrics-vessl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vessl-kube-state-metrics-vessl
subjects:
  - kind: ServiceAccount
    name: vessl-kube-state-metrics
    namespace: vessl
---
# Source: cluster-resources/templates/cluster-agent/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vessl
rules:
  - apiGroups: ['*']
    resources: ['*']
    verbs: ['*']
---
# Source: cluster-resources/templates/cluster-agent/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vessl
subjects:
  - kind: ServiceAccount
    name: vessl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vessl
---
# Source: cluster-resources/charts/harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-harbor-core
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: vessl
    app: "harbor"
    component: core
---
# Source: cluster-resources/charts/harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "vessl-harbor-database"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: vessl
    app: "harbor"
    component: database
---
# Source: cluster-resources/charts/harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "vessl-harbor-jobservice"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: vessl
    app: "harbor"
    component: jobservice
---
# Source: cluster-resources/charts/harbor/templates/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
    - name: notary
      port: 4443
      targetPort: 4443
  selector:
    release: vessl
    app: "harbor"
    component: nginx
---
# Source: cluster-resources/charts/harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-harbor-notary-server
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: vessl
    app: "harbor"
    component: notary-server
---
# Source: cluster-resources/charts/harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-harbor-notary-signer
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: vessl
    app: "harbor"
    component: notary-signer
---
# Source: cluster-resources/charts/harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "vessl-harbor-portal"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: vessl
    app: "harbor"
    component: portal
---
# Source: cluster-resources/charts/harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-harbor-redis
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: vessl
    app: "harbor"
    component: redis
---
# Source: cluster-resources/charts/harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "vessl-harbor-registry"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: vessl
    app: "harbor"
    component: registry
---
# Source: cluster-resources/templates/metrics-exporter/dcgm-exporter-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-dcgm-exporter
  labels:
    app.kubernetes.io/name: dcgm-exporter
    app.kubernetes.io/version: 2.1.1
    v1.k8s.savvihub.com/managed: 'true'
    v1.k8s.savvihub.com/type: dcgm-exporter
    v1.k8s.vessl.ai/managed: 'true'
    v1.k8s.vessl.ai/type: dcgm-exporter
spec:
  selector:
    app.kubernetes.io/name: dcgm-exporter
    app.kubernetes.io/version: 2.1.1
  ports:
    - name: metrics
      port: 9400
---
# Source: cluster-resources/templates/metrics-exporter/kube-state-metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-kube-state-metrics
  labels:
    name: kube-state-metrics
    v1.k8s.savvihub.com/managed: 'true'
    v1.k8s.savvihub.com/type: kube-state-metrics
    v1.k8s.vessl.ai/managed: 'true'
    v1.k8s.vessl.ai/type: kube-state-metrics
  annotations:
    prometheus.io/scrape: 'true'
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    name: kube-state-metrics
---
# Source: cluster-resources/templates/metrics-exporter/node-exporter-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vessl-node-exporter
  labels:
    v1.k8s.savvihub.com/managed: 'true'
    v1.k8s.savvihub.com/type: node-exporter
    v1.k8s.vessl.ai/managed: 'true'
    v1.k8s.vessl.ai/type: node-exporter
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    name: node-exporter
    phase: prod
  ports:
    - name: metrics
      protocol: TCP
      port: 80
      targetPort: 9100
---
# Source: cluster-resources/templates/cluster-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vessl-agent
spec:
  selector:
    matchLabels:
      name: vessl-agent
  template:
    metadata:
      labels:
        name: vessl-agent
        v1.k8s.savvihub.com/logs-enabled: 'true'
        v1.k8s.savvihub.com/type: agent
        v1.k8s.vessl.ai/logs-enabled: 'true'
        v1.k8s.vessl.ai/type: agent
    spec:
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
      containers:
        - name: vessl-agent
          image: harbor.vessl/quay/vessl-ai/cluster-agent:0.5.8
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: VESSL_ENV
              value: "prod"
            - name: VESSL_API_URL
              value: "https://api.vessl.ai"
            - name: VESSL_LOG_LEVEL
              value: "info"
            - name: VESSL_SENTRY_DSN
              value: "https://0481c31171114c109ac911ac947f0518@o386227.ingest.sentry.io/5585090"
            - name: VESSL_HELM_RELEASE_NAME
              value: "vessl"
            - name: VESSL_KUBERNETES_INGRESS_ENDPOINT
              value: ""
            - name: VESSL_PROVIDER_TYPE
              value: "on-premise"
            - name: VESSL_LOCAL_STORAGE_CLASS_NAME
              value: "vessl-local-path-vessl"
            - name: VESSL_CONTAINER_LOG_FORMAT
              value: "json"
          volumeMounts:
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: logcontainerpath
              readOnly: true
              mountPath: /var/lib/docker/containers
            - name: access-token
              readOnly: true
              mountPath: /secrets
      terminationGracePeriodSeconds: 30
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: logcontainerpath
          hostPath:
            path: /var/lib/docker/containers
        - name: access-token
          secret:
            secretName: vessl-agent
      serviceAccountName: vessl
---
# Source: cluster-resources/templates/feature-discovery/gpu-feature-discovery-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vessl-gpu-feature-discovery
  labels:
    app.kubernetes.io/name: gpu-feature-discovery
    app.kubernetes.io/version: v0.2.2
    app.kubernetes.io/part-of: nvidia-gpu
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: gpu-feature-discovery
      app.kubernetes.io/part-of: nvidia-gpu
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gpu-feature-discovery
        app.kubernetes.io/version: v0.2.2
        app.kubernetes.io/part-of: nvidia-gpu
    spec:
      containers:
        - image: harbor.vessl/quay/vessl-ai/gpu-feature-discovery:v0.2.2
          name: gpu-feature-discovery
          securityContext:
            privileged: true
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: output-dir
              mountPath: "/etc/kubernetes/node-feature-discovery/features.d"
            - name: dmi-product-name
              mountPath: "/sys/class/dmi/id/product_name"
      nodeSelector:
        feature.node.kubernetes.io/pci-10de.present: "true" # NVIDIA vendor ID
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
        - name: output-dir
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/features.d"
        - name: dmi-product-name
          hostPath:
            path: "/sys/class/dmi/id/product_name"
---
# Source: cluster-resources/templates/feature-discovery/node-feature-discovery-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vessl-node-feature-discovery
  labels:
    app: node-feature-discovery
spec:
  selector:
    matchLabels:
      app: node-feature-discovery
  template:
    metadata:
      labels:
        app: node-feature-discovery
    spec:
      serviceAccountName: vessl-node-feature-discovery
      containers:
        - env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          image: harbor.vessl/quay/vessl-ai/node-feature-discovery:v0.6.0
          name: nfd-master
          command:
            - "nfd-master"
          args:
            - "--extra-label-ns=nvidia.com"
        - env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          image: harbor.vessl/quay/vessl-ai/node-feature-discovery:v0.6.0
          name: nfd-worker
          command:
            - "nfd-worker"
          args:
            - "--sleep-interval=60s"
            - "--options={\"sources\": {\"pci\": { \"deviceLabelFields\": [\"vendor\"] }}}"
          volumeMounts:
            - name: host-boot
              mountPath: "/host-boot"
              readOnly: true
            - name: host-os-release
              mountPath: "/host-etc/os-release"
              readOnly: true
            - name: host-sys
              mountPath: "/host-sys"
            - name: source-d
              mountPath: "/etc/kubernetes/node-feature-discovery/source.d/"
            - name: features-d
              mountPath: "/etc/kubernetes/node-feature-discovery/features.d/"
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
        - name: host-boot
          hostPath:
            path: "/boot"
        - name: host-os-release
          hostPath:
            path: "/etc/os-release"
        - name: host-sys
          hostPath:
            path: "/sys"
        - name: source-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/source.d/"
        - name: features-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/features.d/"
---
# Source: cluster-resources/templates/metrics-exporter/dcgm-exporter-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vessl-dcgm-exporter
  labels:
    app.kubernetes.io/name: dcgm-exporter
    app.kubernetes.io/version: 2.0.13-2.1.1-ubuntu18.04
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: dcgm-exporter
      app.kubernetes.io/version: 2.0.13-2.1.1-ubuntu18.04
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dcgm-exporter
        app.kubernetes.io/version: 2.0.13-2.1.1-ubuntu18.04
      name: dcgm-exporter
    spec:
      nodeSelector:
        feature.node.kubernetes.io/pci-10de.present: 'true' # NVIDIA vendor ID
      containers:
      - image: harbor.vessl/quay/vessl-ai/dcgm-exporter:2.0.13-2.1.1-ubuntu18.04
        env:
        - name: DCGM_EXPORTER_LISTEN
          value: ':9400'
        - name: DCGM_EXPORTER_KUBERNETES
          value: 'true'
        name: dcgm-exporter
        ports:
        - name: metrics
          containerPort: 9400
        securityContext:
          privileged: true
        volumeMounts:
        - name: nvidia-install-dir-host
          mountPath: /usr/local/nvidia
        - name: pod-gpu-resources
          readOnly: true
          mountPath: /var/lib/kubelet/pod-resources
        command: ["dcgm-exporter", "-k"]
      tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
      - name: pod-gpu-resources
        hostPath:
          path: /var/lib/kubelet/pod-resources
      - name: nvidia-install-dir-host
        hostPath:
          path: /home/kubernetes/bin/nvidia
---
# Source: cluster-resources/templates/metrics-exporter/node-exporter-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vessl-node-exporter
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      name: node-exporter
      phase: prod
  template:
    metadata:
      labels:
        name: node-exporter
        phase: prod
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
              - matchExpressions:
                - key: beta.kubernetes.io/os
                  operator: In
                  values:
                  - linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      hostPID: true
      containers:
      - name: node-exporter
        image: harbor.vessl/quay/vessl-ai/node-exporter:v1.1.2
        args:
          - --path.procfs=/host/proc
          - --path.sysfs=/host/sys
          - --path.rootfs=/host/root
          - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker|var/lib/containerd|var/lib/containers/.+)($|/)
          - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
        ports:
          - name: metrics
            containerPort: 9100
        resources:
          requests:
            cpu: 10m
            memory: 24Mi
          limits:
            cpu: 200m
            memory: 100Mi
        volumeMounts:
          - name: proc
            mountPath: /host/proc
            readOnly:  true
          - name: sys
            mountPath: /host/sys
            readOnly: true
          - name: root
            mountPath: /host/root
            readOnly: true
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
---
# Source: cluster-resources/templates/nvidia-device-plugin/daemonset.yaml
# Copyright (c) 2019, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vessl-nvidia-device-plugin
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      # This annotation is deprecated. Kept here for backward compatibility
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: nvidia-device-plugin
    spec:
      tolerations:
      # This toleration is deprecated. Kept here for backward compatibility
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      - key: CriticalAddonsOnly
        operator: Exists
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists
      # Mark this pod as a critical add-on; when enabled, the critical add-on
      # scheduler reserves resources for critical add-on pods so that they can
      # be rescheduled after a failure.
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      priorityClassName: "system-node-critical"
      containers:
      - image: harbor.vessl/quay/vessl-ai/nvidia-device-plugin:v0.9.0
        name: nvidia-device-plugin
        args: [ "--fail-on-init-error=false", "--device-list-strategy=envvar" ]
        securityContext:
          privileged: true
          capabilities:
            drop: ["ALL"]
        volumeMounts:
          - name: device-plugin
            mountPath: /var/lib/kubelet/device-plugins
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
---
# Source: cluster-resources/charts/harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vessl-harbor-core
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: vessl
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: bf3159b0e48120f59479f07e6d8ef4d20d6a93a0c09fdb4999d6c42afd596ef5
        checksum/secret: 5f058e9d4da9254e7c28b99e3d2ba65c0c9d26195d5fa5199e40dbd21a964b67
        checksum/secret-jobservice: cfc9c9acf70559c1a78d7b5e4c0fd7f38f140e0f9843a0c2bb08effe3da011e8
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.5.0
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "vessl-harbor-core"
        - secretRef:
            name: "vessl-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: vessl-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "vessl-harbor-jobservice"
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: vessl-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: vessl-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: vessl-harbor-core
      - name: ca-download
        secret:
          secretName: vessl-harbor-nginx
      - name: psc
        emptyDir: {}
---
# Source: cluster-resources/charts/harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "vessl-harbor-jobservice"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 6d205145382221a1fdebddcdb7edbd516aec7a7f6d0fdd7d2a4479af74ed178d
        checksum/configmap-env: 590e5f07513d93e371b5863893eba404cb329daf8c98b8502c1e8eb51a6fa6f6
        checksum/secret: 066444b6cd9b628ff0a2a75c3dea6466f3a7f89c9aa97d9476e686906bf72efe
        checksum/secret-core: b917e157f71613cd8457497cc27d8599b12db7fca4384360ce8e52c20e84c198
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: vessl-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "vessl-harbor-jobservice-env"
        - secretRef:
            name: "vessl-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "vessl-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: vessl-harbor-jobservice
---
# Source: cluster-resources/charts/harbor/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vessl-harbor-nginx
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: nginx
      annotations:
        checksum/configmap: c823933ae9bd456a58de2401722d8ed82270e06426fff17c4e2600a4539def40
        checksum/secret: 7237d392de7b8d8f24eca7c30bdefce95d5d190fbd1f4ed79fe48827d589a640
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: nginx
        image: "goharbor/nginx-photon:v2.5.0"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        - containerPort: 8443
        - containerPort: 4443
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certificate
          mountPath: /etc/nginx/cert
      volumes:
      - name: config
        configMap:
          name: vessl-harbor-nginx
      - name: certificate
        secret:
          secretName: vessl-harbor-nginx
---
# Source: cluster-resources/charts/harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vessl-harbor-notary-server
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 26ec6314ec37cf4f0d16bf8d5aef953d548a0b4afd6dec17f1e2195dff618ab3
        checksum/secret-core: e91039c54ff772c77e20188e6d2bd85c996042d9def03e911e02ad0f4b874021
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /_notary_server/health
            scheme: "HTTP"
            port: 4443
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_notary_server/health
            scheme: "HTTP"
            port: 4443
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:fuck2@vessl-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: config
          mountPath: /etc/notary/server-config.postgres.json
          subPath: server.json
        - name: token-service-certificate
          mountPath: /root.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/ca.crt
          subPath: ca.crt
      volumes:
      - name: config
        secret:
          secretName: "vessl-harbor-notary-server"
      - name: token-service-certificate
        secret:
          secretName: vessl-harbor-core
      - name: signer-certificate
        secret:
          secretName: vessl-harbor-notary-server
---
# Source: cluster-resources/charts/harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vessl-harbor-notary-signer
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: bbcc710a855b0657da8c6df5413bc377ee67e7333dfa9c43b7ee94a5f305b877
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: "HTTPS"
            port: 7899
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: "HTTPS"
            port: 7899
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:fuck2@vessl-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: config
          mountPath: /etc/notary/signer-config.postgres.json
          subPath: signer.json
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.crt
          subPath: tls.crt
        - name: signer-certificate
          mountPath: /etc/ssl/notary/tls.key
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: "vessl-harbor-notary-server"
      - name: signer-certificate
        secret:
          secretName: vessl-harbor-notary-server
---
# Source: cluster-resources/charts/harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "vessl-harbor-portal"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: vessl
        app: "harbor"
        component: portal
      annotations:
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "vessl-harbor-portal"
---
# Source: cluster-resources/charts/harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "vessl-harbor-registry"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 49b6eaf7fd564213ca25e0a7223bf9df55b4c262cce9b4856b8879de907843ed
        checksum/secret: 821ac925d1fb86f456999cd6c8c26d7a55d7109ee8fced5f10305c8d8df59131
        checksum/secret-jobservice: 93d26e4807cc1adbab3b97c9f78fc523047758aa63867d81114e02a0ea01e9fc
        checksum/secret-core: d51492b381fd7236930397c7909ac12593c20e751b691543ca64f7509e28ce8f
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "vessl-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "vessl-harbor-registryctl"
        - secretRef:
            name: "vessl-harbor-registry"
        - secretRef:
            name: "vessl-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: vessl-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: vessl-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: vessl-harbor-registry-htpasswd
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "vessl-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: vessl-harbor-registry
---
# Source: cluster-resources/templates/local-path-provisioner/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vessl-local-path-provisioner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vessl-local-path-provisioner
  template:
    metadata:
      labels:
        app: vessl-local-path-provisioner
    spec:
      serviceAccountName: vessl-local-path-provisioner-service-account
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
      containers:
        - name: local-path-provisioner
          image: quay.io/vessl-ai/local-path-provisioner:v0.0.20
          imagePullPolicy: IfNotPresent
          command:
            - local-path-provisioner
            - --debug
            - start
            - --config
            - /etc/config/config.json
            - --helper-image
            - quay.io/vessl-ai/busybox:21.10
            - --provisioner-name
            - rancher.io/local-path
            - --service-account-name
            - vessl-local-path-provisioner-service-account
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config/
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      volumes:
        - name: config-volume
          configMap:
            name: local-path-config
---
# Source: cluster-resources/templates/metrics-exporter/kube-state-metrics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vessl-kube-state-metrics
spec:
  selector:
    matchLabels:
      name: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        name: kube-state-metrics
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
              - matchExpressions:
                - key: beta.kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
      serviceAccountName: vessl-kube-state-metrics
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
      containers:
      - name: kube-state-metrics
        image: harbor.vessl/quay/vessl-ai/kube-state-metrics:v1.9.7
        ports:
        - name: metrics
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 10m
            memory: 150Mi
          limits:
            cpu: 200m
            memory: 150Mi
---
# Source: cluster-resources/charts/harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vessl-harbor-database"
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "vessl-harbor-database"
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: b03b8638628d66f8a7aaec398856c53d9b2ccbd8af7f632512bff8312821df78
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.5.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.5.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: vessl-harbor-core
                key: POSTGRESQL_PASSWORD
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: vessl-local-path-vessl
      resources:
        requests:
          storage: "1Gi"
---
# Source: cluster-resources/charts/harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vessl-harbor-redis
  labels:
    heritage: Helm
    release: vessl
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: vessl-harbor-redis
  selector:
    matchLabels:
      release: vessl
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: vessl
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: vessl-local-path-vessl
      resources:
        requests:
          storage: "1Gi"
---
# Source: cluster-resources/charts/harbor/templates/setup-job/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-harbor
spec:
  template:
    spec:
      containers:
        - name: setup-harbor
          image: quay.io/vessl-ai/setup-harbor-for-vessl:latest
          command:
            - /setup-harbor
          env:
            - name: HARBOR_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vessl-harbor-core
                  key: HARBOR_ADMIN_PASSWORD
                  optional: false
      restartPolicy: OnFailure
---
# Source: cluster-resources/templates/cluster-agent/priorityclass.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: vessl-default-priority-vessl
value: 100
preemptionPolicy: Never
globalDefault: false
description: "Vessl default priority."
---
# Source: cluster-resources/templates/cluster-agent/priorityclass.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: vessl-high-priority-vessl
value: 200
preemptionPolicy: Never
globalDefault: false
description: "Vessl high priority."
