agent:
  customImageSource:
  accessToken:
  clusterName:
  ingressEndpoint:
  imagePullPolicy: IfNotPresent
  providerType: on-premise
  localStorageClassName:
  apiServer: https://api.vessl.ai
  logLevel: info
  env: prod
  imageVersion: "0.5.13"
  sentryDsn: https://0481c31171114c109ac911ac947f0518@o386227.ingest.sentry.io/5585090
  containerLogPath: /var/lib/docker/containers
  containerLogFormat: json

featureDiscovery:
  gpuFeatureDiscovery:
    imageVersion: v0.2.2
  nodeFeatureDiscovery:
    imageVersion: v0.6.0

nvidiaDevicePlugin:
  deviceListStrategy: envvar

localPathProvisioner:
  hostPath: /opt/local-path-provisioner
  imageVersion: v0.0.20
  helperImageVersion: "21.10"
  provisionerName: rancher.io/local-path

metricsExporters:
  dcgmExporter:
    imageVersion: "2.0.13-2.1.1-ubuntu18.04"
    useDeviceName:
  kubeStateMetrics:
    imageVersion: v2.3.0
  nodeExporter:
    imageVersion: v1.1.2

tolerations:
  - key: CriticalAddonsOnly
    operator: Exists

harbor:
  enabled: false
  mirrorSourceType: quay # must be quay
  nodeSelector: {}
  harborAdminPassword: Harbor12345
  registryPassword: changeme
  databasePassword: changeme2
  clusterIP: # @XXX: consult with vessl team if you are going to use client-side harbor

prometheus:
  remoteWriteURL: https://remote-write-gateway.vessl.ai/remote-write
  enabled: false

kube-prometheus-stack:
  prometheusOperator:
    enabled: true # if you already have prometheus-operator, set this false
  defaultRules:
    create: false
  alertmanager:
    enabled: false
  grafana:
    enabled: false
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: false
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  prometheus:
    enabled: false